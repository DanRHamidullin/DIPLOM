"""
Джанго настройки для бэкенда проекта.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Правило задания путей внутри проекта: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Это секретный ключ
SECRET_KEY = 'sc%oco$+(3$z$at=z4j)#l-+ym)+_b11389mdt2^12m$bf63%@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'proshop-demo.herokuapp.com']

# Application definition
#Это массив приложений, которые подключаются к нашему приложению.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'corsheaders',
    'storages',

    'base.apps.BaseConfig',
]

#Подключение JWT аутентификации к нашему Rest.
#Мы указываем какой сервер аутентификации будет использоваться,
# то есть идет указание класса проверки подлинности по дефолту.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# Про JWT - суть JWT, в том, что не нужно хранилище на стороне сервера.
# Вся информация встроена в сам токен, который подписан секретным ключом,
# который есть только у сервера (предполагается, что он есть, если вы сделаете это правильно,
# то уязвимости в системе безопасности не будет).Сервер считывает информацию в JWT и подтверждает,
# что он был подписан с секретным ключом, который имеет только он сам. В случае успеха он доверяет информации,
# содержащейся в JWT. Следовательно, ему не нужно ничего искать в какой-либо базе данных.
#(на стороне фронта access token хранится в LocalStorage)

#Структура JWT - состоит из трех частей, разделенных точками (.): 1)заголовок, 2)полезная нагрузка, 3)подпись.
#1)Заголовок(Header): Определяет, какой алгоритм используется для создания подписи.(typ: JWT, alg: HS256)
#2)Полезная нагрузка(Payload-Data): Содержит набор утверждений. Утверждения - это утверждения о сущности.
#3)Подпись(Verify Signature) : Надежно проверяет токен.
#Соотвественно нам надо задать все настройки по JWT внутри Setings.py, а механизм верификации берет на себя simple_jwt.

#Simple JWT предоставляет серверную часть аутентификации веб-токенов
# JSON для платформы Django REST.
#Тут находятся различные настройки по JWT.
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=00.1), #Время жизни токена
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), #Время в течении которого происходит обновление токена
    'ROTATE_REFRESH_TOKENS': False, # true - если токен обновления отправляется в TokenRefreshView, новый
                                    # токен обновления будет возвращен вместе с новым токеном доступа.
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    # Алгоритм из библиотеки PyJWT, который будет использоваться для
    # выполнения операций подписи/проверки токенов.
    'ALGORITHM': 'HS256',
    # Проверочный ключ, который используется для проверки содержимого
    # сгенерированных токенов.
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    #Типы заголовков авторизации, которые будут приняты для представлений,
    # требующих аутентификации. Например, значение 'Bearer'означает, что представления,
    # требующие проверки подлинности, будут искать заголовок в следующем
    # формате: Authorization: Bearer <token>.
    'AUTH_HEADER_TYPES': ('Bearer',),
    #Имя заголовка авторизации, которое будет использоваться для аутентификации.
    # По умолчанию используется HTTP_AUTHORIZATION тот, который примет
    # Authorization заголовок в запросе.
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    #Поле базы данных из модели пользователя, которое будет включено в сгенерированные
    #токены для идентификации пользователей. Рекомендуется, чтобы значение этого
    #параметра указывало поле, которое обычно не изменяется после выбора его начального значения.
    'USER_ID_FIELD': 'id',
    #Утверждение в сгенерированных токенах, которые будут использоваться
    # для хранения идентификаторов пользователей.
    'USER_ID_CLAIM': 'user_id',
    #Список путей к классам, указывающих типы токенов, которым разрешено подтверждать аутентификацию.
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    #Имя утверждения, используемое для хранения типа токена.
    'TOKEN_TYPE_CLAIM': 'token_type',

    #Имя утверждения, используемое для хранения уникального идентификатора токена.
    #Этот идентификатор используется для идентификации отозванных токенов в приложении "Черный список".
    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'frontend/build')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': 'proshop',
#        'USER': 'dennisivy',
#        'PASSWORD': os.environ.get('DB_PASS'),
#        'HOST': os.environ.get('HOST'),
#        'PORT': '5432'
#    }
# }


# Валидация паролей
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/images/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'frontend/build/static'
]


MEDIA_ROOT = BASE_DIR / 'static/images'
STATIC_ROOT = BASE_DIR / 'staticfiles'

CORS_ALLOW_ALL_ORIGINS = True


# Dont forget to reset database connection and hide password
#AWS_QUERYSTRING_AUTH = False
#DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

#AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
#AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

#AWS_STORAGE_BUCKET_NAME = 'proshop-bucket-demo'


if os.getcwd() == '/app':
    DEBUG = False
